
sds.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a3c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001b48  08001b48  00011b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b68  08001b68  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001b68  08001b68  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001b68  08001b68  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b68  08001b68  00011b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001b6c  08001b6c  00011b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001b70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  2000000c  08001b7c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  08001b7c  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000477c  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001241  00000000  00000000  000247b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000508  00000000  00000000  000259f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000460  00000000  00000000  00025f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016320  00000000  00000000  00026360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005df3  00000000  00000000  0003c680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080c6e  00000000  00000000  00042473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c30e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000012f8  00000000  00000000  000c3134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001b30 	.word	0x08001b30

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001b30 	.word	0x08001b30

0800014c <__gesf2>:
 800014c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000150:	e006      	b.n	8000160 <__cmpsf2+0x4>
 8000152:	bf00      	nop

08000154 <__lesf2>:
 8000154:	f04f 0c01 	mov.w	ip, #1
 8000158:	e002      	b.n	8000160 <__cmpsf2+0x4>
 800015a:	bf00      	nop

0800015c <__cmpsf2>:
 800015c:	f04f 0c01 	mov.w	ip, #1
 8000160:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000164:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000168:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800016c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000170:	bf18      	it	ne
 8000172:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000176:	d011      	beq.n	800019c <__cmpsf2+0x40>
 8000178:	b001      	add	sp, #4
 800017a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800017e:	bf18      	it	ne
 8000180:	ea90 0f01 	teqne	r0, r1
 8000184:	bf58      	it	pl
 8000186:	ebb2 0003 	subspl.w	r0, r2, r3
 800018a:	bf88      	it	hi
 800018c:	17c8      	asrhi	r0, r1, #31
 800018e:	bf38      	it	cc
 8000190:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000194:	bf18      	it	ne
 8000196:	f040 0001 	orrne.w	r0, r0, #1
 800019a:	4770      	bx	lr
 800019c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80001a0:	d102      	bne.n	80001a8 <__cmpsf2+0x4c>
 80001a2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80001a6:	d105      	bne.n	80001b4 <__cmpsf2+0x58>
 80001a8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80001ac:	d1e4      	bne.n	8000178 <__cmpsf2+0x1c>
 80001ae:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80001b2:	d0e1      	beq.n	8000178 <__cmpsf2+0x1c>
 80001b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80001b8:	4770      	bx	lr
 80001ba:	bf00      	nop

080001bc <__aeabi_cfrcmple>:
 80001bc:	4684      	mov	ip, r0
 80001be:	4608      	mov	r0, r1
 80001c0:	4661      	mov	r1, ip
 80001c2:	e7ff      	b.n	80001c4 <__aeabi_cfcmpeq>

080001c4 <__aeabi_cfcmpeq>:
 80001c4:	b50f      	push	{r0, r1, r2, r3, lr}
 80001c6:	f7ff ffc9 	bl	800015c <__cmpsf2>
 80001ca:	2800      	cmp	r0, #0
 80001cc:	bf48      	it	mi
 80001ce:	f110 0f00 	cmnmi.w	r0, #0
 80001d2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080001d4 <__aeabi_fcmpeq>:
 80001d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80001d8:	f7ff fff4 	bl	80001c4 <__aeabi_cfcmpeq>
 80001dc:	bf0c      	ite	eq
 80001de:	2001      	moveq	r0, #1
 80001e0:	2000      	movne	r0, #0
 80001e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80001e6:	bf00      	nop

080001e8 <__aeabi_fcmplt>:
 80001e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80001ec:	f7ff ffea 	bl	80001c4 <__aeabi_cfcmpeq>
 80001f0:	bf34      	ite	cc
 80001f2:	2001      	movcc	r0, #1
 80001f4:	2000      	movcs	r0, #0
 80001f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80001fa:	bf00      	nop

080001fc <__aeabi_fcmple>:
 80001fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000200:	f7ff ffe0 	bl	80001c4 <__aeabi_cfcmpeq>
 8000204:	bf94      	ite	ls
 8000206:	2001      	movls	r0, #1
 8000208:	2000      	movhi	r0, #0
 800020a:	f85d fb08 	ldr.w	pc, [sp], #8
 800020e:	bf00      	nop

08000210 <__aeabi_fcmpge>:
 8000210:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000214:	f7ff ffd2 	bl	80001bc <__aeabi_cfrcmple>
 8000218:	bf94      	ite	ls
 800021a:	2001      	movls	r0, #1
 800021c:	2000      	movhi	r0, #0
 800021e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000222:	bf00      	nop

08000224 <__aeabi_fcmpgt>:
 8000224:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000228:	f7ff ffc8 	bl	80001bc <__aeabi_cfrcmple>
 800022c:	bf34      	ite	cc
 800022e:	2001      	movcc	r0, #1
 8000230:	2000      	movcs	r0, #0
 8000232:	f85d fb08 	ldr.w	pc, [sp], #8
 8000236:	bf00      	nop

08000238 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000238:	b5b0      	push	{r4, r5, r7, lr}
 800023a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023c:	f000 faa2 	bl	8000784 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000240:	f000 f8d8 	bl	80003f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000244:	f000 f970 	bl	8000528 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000248:	f000 f930 	bl	80004ac <MX_ADC1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 f7_status=HAL_GPIO_ReadPin (GPIOA, f7_Pin);
 800024c:	2108      	movs	r1, #8
 800024e:	4861      	ldr	r0, [pc, #388]	; (80003d4 <main+0x19c>)
 8000250:	f000 ff74 	bl	800113c <HAL_GPIO_ReadPin>
 8000254:	4603      	mov	r3, r0
 8000256:	461a      	mov	r2, r3
 8000258:	4b5f      	ldr	r3, [pc, #380]	; (80003d8 <main+0x1a0>)
 800025a:	601a      	str	r2, [r3, #0]
	 sds_status=HAL_GPIO_ReadPin(GPIOA, sds_Pin);
 800025c:	2110      	movs	r1, #16
 800025e:	485d      	ldr	r0, [pc, #372]	; (80003d4 <main+0x19c>)
 8000260:	f000 ff6c 	bl	800113c <HAL_GPIO_ReadPin>
 8000264:	4603      	mov	r3, r0
 8000266:	461a      	mov	r2, r3
 8000268:	4b5c      	ldr	r3, [pc, #368]	; (80003dc <main+0x1a4>)
 800026a:	601a      	str	r2, [r3, #0]
	 reset_status=HAL_GPIO_ReadPin(GPIOA, reset_Pin);
 800026c:	2120      	movs	r1, #32
 800026e:	4859      	ldr	r0, [pc, #356]	; (80003d4 <main+0x19c>)
 8000270:	f000 ff64 	bl	800113c <HAL_GPIO_ReadPin>
 8000274:	4603      	mov	r3, r0
 8000276:	461a      	mov	r2, r3
 8000278:	4b59      	ldr	r3, [pc, #356]	; (80003e0 <main+0x1a8>)
 800027a:	601a      	str	r2, [r3, #0]
	 if(reset_status==1){
 800027c:	4b58      	ldr	r3, [pc, #352]	; (80003e0 <main+0x1a8>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	2b01      	cmp	r3, #1
 8000282:	d102      	bne.n	800028a <main+0x52>
		flag=0;
 8000284:	4b57      	ldr	r3, [pc, #348]	; (80003e4 <main+0x1ac>)
 8000286:	2200      	movs	r2, #0
 8000288:	601a      	str	r2, [r3, #0]
	 }
	 if(((voltage_value<=83)&(voltage_value>=65))&(f7_status==1)&(sds_status==1)&(flag=0)){
 800028a:	4b57      	ldr	r3, [pc, #348]	; (80003e8 <main+0x1b0>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	2201      	movs	r2, #1
 8000290:	4614      	mov	r4, r2
 8000292:	4956      	ldr	r1, [pc, #344]	; (80003ec <main+0x1b4>)
 8000294:	4618      	mov	r0, r3
 8000296:	f7ff ffb1 	bl	80001fc <__aeabi_fcmple>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d101      	bne.n	80002a4 <main+0x6c>
 80002a0:	2300      	movs	r3, #0
 80002a2:	461c      	mov	r4, r3
 80002a4:	b2e4      	uxtb	r4, r4
 80002a6:	4b50      	ldr	r3, [pc, #320]	; (80003e8 <main+0x1b0>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	2201      	movs	r2, #1
 80002ac:	4615      	mov	r5, r2
 80002ae:	4950      	ldr	r1, [pc, #320]	; (80003f0 <main+0x1b8>)
 80002b0:	4618      	mov	r0, r3
 80002b2:	f7ff ffad 	bl	8000210 <__aeabi_fcmpge>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d101      	bne.n	80002c0 <main+0x88>
 80002bc:	2300      	movs	r3, #0
 80002be:	461d      	mov	r5, r3
 80002c0:	b2eb      	uxtb	r3, r5
 80002c2:	4023      	ands	r3, r4
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	461a      	mov	r2, r3
 80002c8:	4b43      	ldr	r3, [pc, #268]	; (80003d8 <main+0x1a0>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	2b01      	cmp	r3, #1
 80002ce:	bf0c      	ite	eq
 80002d0:	2301      	moveq	r3, #1
 80002d2:	2300      	movne	r3, #0
 80002d4:	b2db      	uxtb	r3, r3
 80002d6:	4013      	ands	r3, r2
 80002d8:	4a40      	ldr	r2, [pc, #256]	; (80003dc <main+0x1a4>)
 80002da:	6812      	ldr	r2, [r2, #0]
 80002dc:	2a01      	cmp	r2, #1
 80002de:	bf0c      	ite	eq
 80002e0:	2201      	moveq	r2, #1
 80002e2:	2200      	movne	r2, #0
 80002e4:	b2d2      	uxtb	r2, r2
 80002e6:	401a      	ands	r2, r3
 80002e8:	4b3e      	ldr	r3, [pc, #248]	; (80003e4 <main+0x1ac>)
 80002ea:	2100      	movs	r1, #0
 80002ec:	6019      	str	r1, [r3, #0]
 80002ee:	4b3d      	ldr	r3, [pc, #244]	; (80003e4 <main+0x1ac>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	4013      	ands	r3, r2
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d014      	beq.n	8000322 <main+0xea>
		 HAL_GPIO_WritePin(GPIOA, vled_Pin, GPIO_PIN_RESET); //pa6 vled
 80002f8:	2200      	movs	r2, #0
 80002fa:	2140      	movs	r1, #64	; 0x40
 80002fc:	4835      	ldr	r0, [pc, #212]	; (80003d4 <main+0x19c>)
 80002fe:	f000 ff34 	bl	800116a <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOA, f7led_Pin, GPIO_PIN_RESET); //pa7 f7led
 8000302:	2200      	movs	r2, #0
 8000304:	2180      	movs	r1, #128	; 0x80
 8000306:	4833      	ldr	r0, [pc, #204]	; (80003d4 <main+0x19c>)
 8000308:	f000 ff2f 	bl	800116a <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOA, sdcled_Pin, GPIO_PIN_RESET); //pa8
 800030c:	2200      	movs	r2, #0
 800030e:	2101      	movs	r1, #1
 8000310:	4830      	ldr	r0, [pc, #192]	; (80003d4 <main+0x19c>)
 8000312:	f000 ff2a 	bl	800116a <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOA, sdsled_Pin, GPIO_PIN_RESET); //pa9
 8000316:	2200      	movs	r2, #0
 8000318:	2102      	movs	r1, #2
 800031a:	482e      	ldr	r0, [pc, #184]	; (80003d4 <main+0x19c>)
 800031c:	f000 ff25 	bl	800116a <HAL_GPIO_WritePin>
 8000320:	e794      	b.n	800024c <main+0x14>
		 //brake release

	 }
	 else{
		 flag=1;
 8000322:	4b30      	ldr	r3, [pc, #192]	; (80003e4 <main+0x1ac>)
 8000324:	2201      	movs	r2, #1
 8000326:	601a      	str	r2, [r3, #0]
		 HAL_GPIO_WritePin(GPIOA, sdcled_Pin, GPIO_PIN_RESET); //pa8
 8000328:	2200      	movs	r2, #0
 800032a:	2101      	movs	r1, #1
 800032c:	4829      	ldr	r0, [pc, #164]	; (80003d4 <main+0x19c>)
 800032e:	f000 ff1c 	bl	800116a <HAL_GPIO_WritePin>
		 //brake actuate

		 if(!((voltage_value<=83)&(voltage_value>=65))){
 8000332:	4b2d      	ldr	r3, [pc, #180]	; (80003e8 <main+0x1b0>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	2201      	movs	r2, #1
 8000338:	4614      	mov	r4, r2
 800033a:	492c      	ldr	r1, [pc, #176]	; (80003ec <main+0x1b4>)
 800033c:	4618      	mov	r0, r3
 800033e:	f7ff ff5d 	bl	80001fc <__aeabi_fcmple>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d101      	bne.n	800034c <main+0x114>
 8000348:	2300      	movs	r3, #0
 800034a:	461c      	mov	r4, r3
 800034c:	b2e3      	uxtb	r3, r4
 800034e:	f083 0301 	eor.w	r3, r3, #1
 8000352:	b2dc      	uxtb	r4, r3
 8000354:	4b24      	ldr	r3, [pc, #144]	; (80003e8 <main+0x1b0>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	2201      	movs	r2, #1
 800035a:	4615      	mov	r5, r2
 800035c:	4924      	ldr	r1, [pc, #144]	; (80003f0 <main+0x1b8>)
 800035e:	4618      	mov	r0, r3
 8000360:	f7ff ff56 	bl	8000210 <__aeabi_fcmpge>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d101      	bne.n	800036e <main+0x136>
 800036a:	2300      	movs	r3, #0
 800036c:	461d      	mov	r5, r3
 800036e:	b2eb      	uxtb	r3, r5
 8000370:	f083 0301 	eor.w	r3, r3, #1
 8000374:	b2db      	uxtb	r3, r3
 8000376:	4323      	orrs	r3, r4
 8000378:	b2db      	uxtb	r3, r3
 800037a:	2b00      	cmp	r3, #0
 800037c:	d005      	beq.n	800038a <main+0x152>
			 HAL_GPIO_WritePin(GPIOA, vled_Pin, GPIO_PIN_SET); //pa6 vled
 800037e:	2201      	movs	r2, #1
 8000380:	2140      	movs	r1, #64	; 0x40
 8000382:	4814      	ldr	r0, [pc, #80]	; (80003d4 <main+0x19c>)
 8000384:	f000 fef1 	bl	800116a <HAL_GPIO_WritePin>
 8000388:	e004      	b.n	8000394 <main+0x15c>
		 }
		 else{
			 HAL_GPIO_WritePin(GPIOA, vled_Pin, GPIO_PIN_RESET);
 800038a:	2200      	movs	r2, #0
 800038c:	2140      	movs	r1, #64	; 0x40
 800038e:	4811      	ldr	r0, [pc, #68]	; (80003d4 <main+0x19c>)
 8000390:	f000 feeb 	bl	800116a <HAL_GPIO_WritePin>
		 }
		 if(f7_status==0){
 8000394:	4b10      	ldr	r3, [pc, #64]	; (80003d8 <main+0x1a0>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d105      	bne.n	80003a8 <main+0x170>
			 HAL_GPIO_WritePin(GPIOA, f7led_Pin, GPIO_PIN_SET); //pa7 f7led
 800039c:	2201      	movs	r2, #1
 800039e:	2180      	movs	r1, #128	; 0x80
 80003a0:	480c      	ldr	r0, [pc, #48]	; (80003d4 <main+0x19c>)
 80003a2:	f000 fee2 	bl	800116a <HAL_GPIO_WritePin>
 80003a6:	e004      	b.n	80003b2 <main+0x17a>
		 }
		 else{
			 HAL_GPIO_WritePin(GPIOA, f7led_Pin, GPIO_PIN_RESET); //pa7 f7led
 80003a8:	2200      	movs	r2, #0
 80003aa:	2180      	movs	r1, #128	; 0x80
 80003ac:	4809      	ldr	r0, [pc, #36]	; (80003d4 <main+0x19c>)
 80003ae:	f000 fedc 	bl	800116a <HAL_GPIO_WritePin>
		 }
		 if(sds_status==0){// check once
 80003b2:	4b0a      	ldr	r3, [pc, #40]	; (80003dc <main+0x1a4>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d105      	bne.n	80003c6 <main+0x18e>
			 HAL_GPIO_WritePin(GPIOA, sdsled_Pin, GPIO_PIN_SET); //pa9
 80003ba:	2201      	movs	r2, #1
 80003bc:	2102      	movs	r1, #2
 80003be:	4805      	ldr	r0, [pc, #20]	; (80003d4 <main+0x19c>)
 80003c0:	f000 fed3 	bl	800116a <HAL_GPIO_WritePin>
 80003c4:	e742      	b.n	800024c <main+0x14>
		 }
		 else{
			 HAL_GPIO_WritePin(GPIOA, sdsled_Pin, GPIO_PIN_RESET); //pa9
 80003c6:	2200      	movs	r2, #0
 80003c8:	2102      	movs	r1, #2
 80003ca:	4802      	ldr	r0, [pc, #8]	; (80003d4 <main+0x19c>)
 80003cc:	f000 fecd 	bl	800116a <HAL_GPIO_WritePin>
	 f7_status=HAL_GPIO_ReadPin (GPIOA, f7_Pin);
 80003d0:	e73c      	b.n	800024c <main+0x14>
 80003d2:	bf00      	nop
 80003d4:	40010800 	.word	0x40010800
 80003d8:	2000005c 	.word	0x2000005c
 80003dc:	20000058 	.word	0x20000058
 80003e0:	20000064 	.word	0x20000064
 80003e4:	20000068 	.word	0x20000068
 80003e8:	20000060 	.word	0x20000060
 80003ec:	42a60000 	.word	0x42a60000
 80003f0:	42820000 	.word	0x42820000

080003f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b094      	sub	sp, #80	; 0x50
 80003f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003fe:	2228      	movs	r2, #40	; 0x28
 8000400:	2100      	movs	r1, #0
 8000402:	4618      	mov	r0, r3
 8000404:	f001 fb8c 	bl	8001b20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000408:	f107 0314 	add.w	r3, r7, #20
 800040c:	2200      	movs	r2, #0
 800040e:	601a      	str	r2, [r3, #0]
 8000410:	605a      	str	r2, [r3, #4]
 8000412:	609a      	str	r2, [r3, #8]
 8000414:	60da      	str	r2, [r3, #12]
 8000416:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000418:	1d3b      	adds	r3, r7, #4
 800041a:	2200      	movs	r2, #0
 800041c:	601a      	str	r2, [r3, #0]
 800041e:	605a      	str	r2, [r3, #4]
 8000420:	609a      	str	r2, [r3, #8]
 8000422:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000424:	2301      	movs	r3, #1
 8000426:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000428:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800042c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800042e:	2300      	movs	r3, #0
 8000430:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000432:	2301      	movs	r3, #1
 8000434:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000436:	2302      	movs	r3, #2
 8000438:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800043a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800043e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000440:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000444:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000446:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800044a:	4618      	mov	r0, r3
 800044c:	f000 fea6 	bl	800119c <HAL_RCC_OscConfig>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000456:	f000 f8dd 	bl	8000614 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800045a:	230f      	movs	r3, #15
 800045c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800045e:	2302      	movs	r3, #2
 8000460:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000462:	2300      	movs	r3, #0
 8000464:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000466:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800046a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800046c:	2300      	movs	r3, #0
 800046e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000470:	f107 0314 	add.w	r3, r7, #20
 8000474:	2102      	movs	r1, #2
 8000476:	4618      	mov	r0, r3
 8000478:	f001 f912 	bl	80016a0 <HAL_RCC_ClockConfig>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000482:	f000 f8c7 	bl	8000614 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000486:	2302      	movs	r3, #2
 8000488:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800048a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800048e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000490:	1d3b      	adds	r3, r7, #4
 8000492:	4618      	mov	r0, r3
 8000494:	f001 fa6a 	bl	800196c <HAL_RCCEx_PeriphCLKConfig>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800049e:	f000 f8b9 	bl	8000614 <Error_Handler>
  }
}
 80004a2:	bf00      	nop
 80004a4:	3750      	adds	r7, #80	; 0x50
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
	...

080004ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b084      	sub	sp, #16
 80004b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
 80004b8:	605a      	str	r2, [r3, #4]
 80004ba:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004bc:	4b18      	ldr	r3, [pc, #96]	; (8000520 <MX_ADC1_Init+0x74>)
 80004be:	4a19      	ldr	r2, [pc, #100]	; (8000524 <MX_ADC1_Init+0x78>)
 80004c0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004c2:	4b17      	ldr	r3, [pc, #92]	; (8000520 <MX_ADC1_Init+0x74>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004c8:	4b15      	ldr	r3, [pc, #84]	; (8000520 <MX_ADC1_Init+0x74>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004ce:	4b14      	ldr	r3, [pc, #80]	; (8000520 <MX_ADC1_Init+0x74>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004d4:	4b12      	ldr	r3, [pc, #72]	; (8000520 <MX_ADC1_Init+0x74>)
 80004d6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80004da:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004dc:	4b10      	ldr	r3, [pc, #64]	; (8000520 <MX_ADC1_Init+0x74>)
 80004de:	2200      	movs	r2, #0
 80004e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80004e2:	4b0f      	ldr	r3, [pc, #60]	; (8000520 <MX_ADC1_Init+0x74>)
 80004e4:	2201      	movs	r2, #1
 80004e6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004e8:	480d      	ldr	r0, [pc, #52]	; (8000520 <MX_ADC1_Init+0x74>)
 80004ea:	f000 f9ad 	bl	8000848 <HAL_ADC_Init>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80004f4:	f000 f88e 	bl	8000614 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80004f8:	2300      	movs	r3, #0
 80004fa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004fc:	2301      	movs	r3, #1
 80004fe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000500:	2300      	movs	r3, #0
 8000502:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000504:	1d3b      	adds	r3, r7, #4
 8000506:	4619      	mov	r1, r3
 8000508:	4805      	ldr	r0, [pc, #20]	; (8000520 <MX_ADC1_Init+0x74>)
 800050a:	f000 fa75 	bl	80009f8 <HAL_ADC_ConfigChannel>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000514:	f000 f87e 	bl	8000614 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000518:	bf00      	nop
 800051a:	3710      	adds	r7, #16
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	20000028 	.word	0x20000028
 8000524:	40012400 	.word	0x40012400

08000528 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b088      	sub	sp, #32
 800052c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052e:	f107 0310 	add.w	r3, r7, #16
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
 800053a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800053c:	4b32      	ldr	r3, [pc, #200]	; (8000608 <MX_GPIO_Init+0xe0>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	4a31      	ldr	r2, [pc, #196]	; (8000608 <MX_GPIO_Init+0xe0>)
 8000542:	f043 0320 	orr.w	r3, r3, #32
 8000546:	6193      	str	r3, [r2, #24]
 8000548:	4b2f      	ldr	r3, [pc, #188]	; (8000608 <MX_GPIO_Init+0xe0>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	f003 0320 	and.w	r3, r3, #32
 8000550:	60fb      	str	r3, [r7, #12]
 8000552:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000554:	4b2c      	ldr	r3, [pc, #176]	; (8000608 <MX_GPIO_Init+0xe0>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	4a2b      	ldr	r2, [pc, #172]	; (8000608 <MX_GPIO_Init+0xe0>)
 800055a:	f043 0304 	orr.w	r3, r3, #4
 800055e:	6193      	str	r3, [r2, #24]
 8000560:	4b29      	ldr	r3, [pc, #164]	; (8000608 <MX_GPIO_Init+0xe0>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	f003 0304 	and.w	r3, r3, #4
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056c:	4b26      	ldr	r3, [pc, #152]	; (8000608 <MX_GPIO_Init+0xe0>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	4a25      	ldr	r2, [pc, #148]	; (8000608 <MX_GPIO_Init+0xe0>)
 8000572:	f043 0308 	orr.w	r3, r3, #8
 8000576:	6193      	str	r3, [r2, #24]
 8000578:	4b23      	ldr	r3, [pc, #140]	; (8000608 <MX_GPIO_Init+0xe0>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	f003 0308 	and.w	r3, r3, #8
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, vled_Pin|f7led_Pin, GPIO_PIN_RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	21c0      	movs	r1, #192	; 0xc0
 8000588:	4820      	ldr	r0, [pc, #128]	; (800060c <MX_GPIO_Init+0xe4>)
 800058a:	f000 fdee 	bl	800116a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, sdcled_Pin|sdsled_Pin, GPIO_PIN_RESET);
 800058e:	2200      	movs	r2, #0
 8000590:	2103      	movs	r1, #3
 8000592:	481f      	ldr	r0, [pc, #124]	; (8000610 <MX_GPIO_Init+0xe8>)
 8000594:	f000 fde9 	bl	800116a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : f7_Pin sds_Pin */
  GPIO_InitStruct.Pin = f7_Pin|sds_Pin;
 8000598:	2318      	movs	r3, #24
 800059a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800059c:	2300      	movs	r3, #0
 800059e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a4:	f107 0310 	add.w	r3, r7, #16
 80005a8:	4619      	mov	r1, r3
 80005aa:	4818      	ldr	r0, [pc, #96]	; (800060c <MX_GPIO_Init+0xe4>)
 80005ac:	f000 fc42 	bl	8000e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : reset_Pin */
  GPIO_InitStruct.Pin = reset_Pin;
 80005b0:	2320      	movs	r3, #32
 80005b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b4:	2300      	movs	r3, #0
 80005b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005b8:	2301      	movs	r3, #1
 80005ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(reset_GPIO_Port, &GPIO_InitStruct);
 80005bc:	f107 0310 	add.w	r3, r7, #16
 80005c0:	4619      	mov	r1, r3
 80005c2:	4812      	ldr	r0, [pc, #72]	; (800060c <MX_GPIO_Init+0xe4>)
 80005c4:	f000 fc36 	bl	8000e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : vled_Pin f7led_Pin */
  GPIO_InitStruct.Pin = vled_Pin|f7led_Pin;
 80005c8:	23c0      	movs	r3, #192	; 0xc0
 80005ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005cc:	2301      	movs	r3, #1
 80005ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d0:	2300      	movs	r3, #0
 80005d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d4:	2302      	movs	r3, #2
 80005d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d8:	f107 0310 	add.w	r3, r7, #16
 80005dc:	4619      	mov	r1, r3
 80005de:	480b      	ldr	r0, [pc, #44]	; (800060c <MX_GPIO_Init+0xe4>)
 80005e0:	f000 fc28 	bl	8000e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : sdcled_Pin sdsled_Pin */
  GPIO_InitStruct.Pin = sdcled_Pin|sdsled_Pin;
 80005e4:	2303      	movs	r3, #3
 80005e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e8:	2301      	movs	r3, #1
 80005ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ec:	2300      	movs	r3, #0
 80005ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f0:	2302      	movs	r3, #2
 80005f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005f4:	f107 0310 	add.w	r3, r7, #16
 80005f8:	4619      	mov	r1, r3
 80005fa:	4805      	ldr	r0, [pc, #20]	; (8000610 <MX_GPIO_Init+0xe8>)
 80005fc:	f000 fc1a 	bl	8000e34 <HAL_GPIO_Init>

}
 8000600:	bf00      	nop
 8000602:	3720      	adds	r7, #32
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40021000 	.word	0x40021000
 800060c:	40010800 	.word	0x40010800
 8000610:	40010c00 	.word	0x40010c00

08000614 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000618:	b672      	cpsid	i
}
 800061a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800061c:	e7fe      	b.n	800061c <Error_Handler+0x8>
	...

08000620 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000626:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <HAL_MspInit+0x40>)
 8000628:	699b      	ldr	r3, [r3, #24]
 800062a:	4a0d      	ldr	r2, [pc, #52]	; (8000660 <HAL_MspInit+0x40>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	6193      	str	r3, [r2, #24]
 8000632:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <HAL_MspInit+0x40>)
 8000634:	699b      	ldr	r3, [r3, #24]
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800063e:	4b08      	ldr	r3, [pc, #32]	; (8000660 <HAL_MspInit+0x40>)
 8000640:	69db      	ldr	r3, [r3, #28]
 8000642:	4a07      	ldr	r2, [pc, #28]	; (8000660 <HAL_MspInit+0x40>)
 8000644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000648:	61d3      	str	r3, [r2, #28]
 800064a:	4b05      	ldr	r3, [pc, #20]	; (8000660 <HAL_MspInit+0x40>)
 800064c:	69db      	ldr	r3, [r3, #28]
 800064e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000652:	603b      	str	r3, [r7, #0]
 8000654:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000656:	bf00      	nop
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr
 8000660:	40021000 	.word	0x40021000

08000664 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b088      	sub	sp, #32
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066c:	f107 0310 	add.w	r3, r7, #16
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a14      	ldr	r2, [pc, #80]	; (80006d0 <HAL_ADC_MspInit+0x6c>)
 8000680:	4293      	cmp	r3, r2
 8000682:	d121      	bne.n	80006c8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000684:	4b13      	ldr	r3, [pc, #76]	; (80006d4 <HAL_ADC_MspInit+0x70>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	4a12      	ldr	r2, [pc, #72]	; (80006d4 <HAL_ADC_MspInit+0x70>)
 800068a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800068e:	6193      	str	r3, [r2, #24]
 8000690:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <HAL_ADC_MspInit+0x70>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800069c:	4b0d      	ldr	r3, [pc, #52]	; (80006d4 <HAL_ADC_MspInit+0x70>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	4a0c      	ldr	r2, [pc, #48]	; (80006d4 <HAL_ADC_MspInit+0x70>)
 80006a2:	f043 0304 	orr.w	r3, r3, #4
 80006a6:	6193      	str	r3, [r2, #24]
 80006a8:	4b0a      	ldr	r3, [pc, #40]	; (80006d4 <HAL_ADC_MspInit+0x70>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	f003 0304 	and.w	r3, r3, #4
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006b4:	2301      	movs	r3, #1
 80006b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006b8:	2303      	movs	r3, #3
 80006ba:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006bc:	f107 0310 	add.w	r3, r7, #16
 80006c0:	4619      	mov	r1, r3
 80006c2:	4805      	ldr	r0, [pc, #20]	; (80006d8 <HAL_ADC_MspInit+0x74>)
 80006c4:	f000 fbb6 	bl	8000e34 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80006c8:	bf00      	nop
 80006ca:	3720      	adds	r7, #32
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40012400 	.word	0x40012400
 80006d4:	40021000 	.word	0x40021000
 80006d8:	40010800 	.word	0x40010800

080006dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <NMI_Handler+0x4>

080006e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006e6:	e7fe      	b.n	80006e6 <HardFault_Handler+0x4>

080006e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006ec:	e7fe      	b.n	80006ec <MemManage_Handler+0x4>

080006ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006f2:	e7fe      	b.n	80006f2 <BusFault_Handler+0x4>

080006f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <UsageFault_Handler+0x4>

080006fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006fe:	bf00      	nop
 8000700:	46bd      	mov	sp, r7
 8000702:	bc80      	pop	{r7}
 8000704:	4770      	bx	lr

08000706 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800070a:	bf00      	nop
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr

08000712 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	46bd      	mov	sp, r7
 800071a:	bc80      	pop	{r7}
 800071c:	4770      	bx	lr

0800071e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800071e:	b580      	push	{r7, lr}
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000722:	f000 f875 	bl	8000810 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}

0800072a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800072e:	bf00      	nop
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr
	...

08000738 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000738:	480c      	ldr	r0, [pc, #48]	; (800076c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800073a:	490d      	ldr	r1, [pc, #52]	; (8000770 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800073c:	4a0d      	ldr	r2, [pc, #52]	; (8000774 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800073e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000740:	e002      	b.n	8000748 <LoopCopyDataInit>

08000742 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000742:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000744:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000746:	3304      	adds	r3, #4

08000748 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000748:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800074a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800074c:	d3f9      	bcc.n	8000742 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800074e:	4a0a      	ldr	r2, [pc, #40]	; (8000778 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000750:	4c0a      	ldr	r4, [pc, #40]	; (800077c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000752:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000754:	e001      	b.n	800075a <LoopFillZerobss>

08000756 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000756:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000758:	3204      	adds	r2, #4

0800075a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800075a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800075c:	d3fb      	bcc.n	8000756 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800075e:	f7ff ffe4 	bl	800072a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000762:	f001 f9b9 	bl	8001ad8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000766:	f7ff fd67 	bl	8000238 <main>
  bx lr
 800076a:	4770      	bx	lr
  ldr r0, =_sdata
 800076c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000770:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000774:	08001b70 	.word	0x08001b70
  ldr r2, =_sbss
 8000778:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800077c:	20000070 	.word	0x20000070

08000780 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000780:	e7fe      	b.n	8000780 <ADC1_2_IRQHandler>
	...

08000784 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000788:	4b08      	ldr	r3, [pc, #32]	; (80007ac <HAL_Init+0x28>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a07      	ldr	r2, [pc, #28]	; (80007ac <HAL_Init+0x28>)
 800078e:	f043 0310 	orr.w	r3, r3, #16
 8000792:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000794:	2003      	movs	r0, #3
 8000796:	f000 fb19 	bl	8000dcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800079a:	200f      	movs	r0, #15
 800079c:	f000 f808 	bl	80007b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007a0:	f7ff ff3e 	bl	8000620 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007a4:	2300      	movs	r3, #0
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40022000 	.word	0x40022000

080007b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <HAL_InitTick+0x54>)
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <HAL_InitTick+0x58>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	4619      	mov	r1, r3
 80007c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ce:	4618      	mov	r0, r3
 80007d0:	f000 fb23 	bl	8000e1a <HAL_SYSTICK_Config>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007da:	2301      	movs	r3, #1
 80007dc:	e00e      	b.n	80007fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2b0f      	cmp	r3, #15
 80007e2:	d80a      	bhi.n	80007fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007e4:	2200      	movs	r2, #0
 80007e6:	6879      	ldr	r1, [r7, #4]
 80007e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007ec:	f000 faf9 	bl	8000de2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007f0:	4a06      	ldr	r2, [pc, #24]	; (800080c <HAL_InitTick+0x5c>)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007f6:	2300      	movs	r3, #0
 80007f8:	e000      	b.n	80007fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007fa:	2301      	movs	r3, #1
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000000 	.word	0x20000000
 8000808:	20000008 	.word	0x20000008
 800080c:	20000004 	.word	0x20000004

08000810 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000814:	4b05      	ldr	r3, [pc, #20]	; (800082c <HAL_IncTick+0x1c>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	461a      	mov	r2, r3
 800081a:	4b05      	ldr	r3, [pc, #20]	; (8000830 <HAL_IncTick+0x20>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4413      	add	r3, r2
 8000820:	4a03      	ldr	r2, [pc, #12]	; (8000830 <HAL_IncTick+0x20>)
 8000822:	6013      	str	r3, [r2, #0]
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr
 800082c:	20000008 	.word	0x20000008
 8000830:	2000006c 	.word	0x2000006c

08000834 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  return uwTick;
 8000838:	4b02      	ldr	r3, [pc, #8]	; (8000844 <HAL_GetTick+0x10>)
 800083a:	681b      	ldr	r3, [r3, #0]
}
 800083c:	4618      	mov	r0, r3
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr
 8000844:	2000006c 	.word	0x2000006c

08000848 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b086      	sub	sp, #24
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000850:	2300      	movs	r3, #0
 8000852:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000854:	2300      	movs	r3, #0
 8000856:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000858:	2300      	movs	r3, #0
 800085a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800085c:	2300      	movs	r3, #0
 800085e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d101      	bne.n	800086a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000866:	2301      	movs	r3, #1
 8000868:	e0be      	b.n	80009e8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	689b      	ldr	r3, [r3, #8]
 800086e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000874:	2b00      	cmp	r3, #0
 8000876:	d109      	bne.n	800088c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2200      	movs	r2, #0
 800087c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2200      	movs	r2, #0
 8000882:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000886:	6878      	ldr	r0, [r7, #4]
 8000888:	f7ff feec 	bl	8000664 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f000 f9ab 	bl	8000be8 <ADC_ConversionStop_Disable>
 8000892:	4603      	mov	r3, r0
 8000894:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800089a:	f003 0310 	and.w	r3, r3, #16
 800089e:	2b00      	cmp	r3, #0
 80008a0:	f040 8099 	bne.w	80009d6 <HAL_ADC_Init+0x18e>
 80008a4:	7dfb      	ldrb	r3, [r7, #23]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	f040 8095 	bne.w	80009d6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008b0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80008b4:	f023 0302 	bic.w	r3, r3, #2
 80008b8:	f043 0202 	orr.w	r2, r3, #2
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008c8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	7b1b      	ldrb	r3, [r3, #12]
 80008ce:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80008d0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008d2:	68ba      	ldr	r2, [r7, #8]
 80008d4:	4313      	orrs	r3, r2
 80008d6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	689b      	ldr	r3, [r3, #8]
 80008dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008e0:	d003      	beq.n	80008ea <HAL_ADC_Init+0xa2>
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	689b      	ldr	r3, [r3, #8]
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d102      	bne.n	80008f0 <HAL_ADC_Init+0xa8>
 80008ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ee:	e000      	b.n	80008f2 <HAL_ADC_Init+0xaa>
 80008f0:	2300      	movs	r3, #0
 80008f2:	693a      	ldr	r2, [r7, #16]
 80008f4:	4313      	orrs	r3, r2
 80008f6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	7d1b      	ldrb	r3, [r3, #20]
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d119      	bne.n	8000934 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	7b1b      	ldrb	r3, [r3, #12]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d109      	bne.n	800091c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	3b01      	subs	r3, #1
 800090e:	035a      	lsls	r2, r3, #13
 8000910:	693b      	ldr	r3, [r7, #16]
 8000912:	4313      	orrs	r3, r2
 8000914:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000918:	613b      	str	r3, [r7, #16]
 800091a:	e00b      	b.n	8000934 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000920:	f043 0220 	orr.w	r2, r3, #32
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800092c:	f043 0201 	orr.w	r2, r3, #1
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	685b      	ldr	r3, [r3, #4]
 800093a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	693a      	ldr	r2, [r7, #16]
 8000944:	430a      	orrs	r2, r1
 8000946:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	689a      	ldr	r2, [r3, #8]
 800094e:	4b28      	ldr	r3, [pc, #160]	; (80009f0 <HAL_ADC_Init+0x1a8>)
 8000950:	4013      	ands	r3, r2
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	6812      	ldr	r2, [r2, #0]
 8000956:	68b9      	ldr	r1, [r7, #8]
 8000958:	430b      	orrs	r3, r1
 800095a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	689b      	ldr	r3, [r3, #8]
 8000960:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000964:	d003      	beq.n	800096e <HAL_ADC_Init+0x126>
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	689b      	ldr	r3, [r3, #8]
 800096a:	2b01      	cmp	r3, #1
 800096c:	d104      	bne.n	8000978 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	691b      	ldr	r3, [r3, #16]
 8000972:	3b01      	subs	r3, #1
 8000974:	051b      	lsls	r3, r3, #20
 8000976:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800097e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	68fa      	ldr	r2, [r7, #12]
 8000988:	430a      	orrs	r2, r1
 800098a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	689a      	ldr	r2, [r3, #8]
 8000992:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <HAL_ADC_Init+0x1ac>)
 8000994:	4013      	ands	r3, r2
 8000996:	68ba      	ldr	r2, [r7, #8]
 8000998:	429a      	cmp	r2, r3
 800099a:	d10b      	bne.n	80009b4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2200      	movs	r2, #0
 80009a0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009a6:	f023 0303 	bic.w	r3, r3, #3
 80009aa:	f043 0201 	orr.w	r2, r3, #1
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009b2:	e018      	b.n	80009e6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009b8:	f023 0312 	bic.w	r3, r3, #18
 80009bc:	f043 0210 	orr.w	r2, r3, #16
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009c8:	f043 0201 	orr.w	r2, r3, #1
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80009d0:	2301      	movs	r3, #1
 80009d2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009d4:	e007      	b.n	80009e6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009da:	f043 0210 	orr.w	r2, r3, #16
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
 80009e4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80009e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3718      	adds	r7, #24
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	ffe1f7fd 	.word	0xffe1f7fd
 80009f4:	ff1f0efe 	.word	0xff1f0efe

080009f8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80009f8:	b480      	push	{r7}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a02:	2300      	movs	r3, #0
 8000a04:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d101      	bne.n	8000a18 <HAL_ADC_ConfigChannel+0x20>
 8000a14:	2302      	movs	r3, #2
 8000a16:	e0dc      	b.n	8000bd2 <HAL_ADC_ConfigChannel+0x1da>
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	2b06      	cmp	r3, #6
 8000a26:	d81c      	bhi.n	8000a62 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	685a      	ldr	r2, [r3, #4]
 8000a32:	4613      	mov	r3, r2
 8000a34:	009b      	lsls	r3, r3, #2
 8000a36:	4413      	add	r3, r2
 8000a38:	3b05      	subs	r3, #5
 8000a3a:	221f      	movs	r2, #31
 8000a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a40:	43db      	mvns	r3, r3
 8000a42:	4019      	ands	r1, r3
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	6818      	ldr	r0, [r3, #0]
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	685a      	ldr	r2, [r3, #4]
 8000a4c:	4613      	mov	r3, r2
 8000a4e:	009b      	lsls	r3, r3, #2
 8000a50:	4413      	add	r3, r2
 8000a52:	3b05      	subs	r3, #5
 8000a54:	fa00 f203 	lsl.w	r2, r0, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	430a      	orrs	r2, r1
 8000a5e:	635a      	str	r2, [r3, #52]	; 0x34
 8000a60:	e03c      	b.n	8000adc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	2b0c      	cmp	r3, #12
 8000a68:	d81c      	bhi.n	8000aa4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	685a      	ldr	r2, [r3, #4]
 8000a74:	4613      	mov	r3, r2
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	4413      	add	r3, r2
 8000a7a:	3b23      	subs	r3, #35	; 0x23
 8000a7c:	221f      	movs	r2, #31
 8000a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a82:	43db      	mvns	r3, r3
 8000a84:	4019      	ands	r1, r3
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	6818      	ldr	r0, [r3, #0]
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	685a      	ldr	r2, [r3, #4]
 8000a8e:	4613      	mov	r3, r2
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	4413      	add	r3, r2
 8000a94:	3b23      	subs	r3, #35	; 0x23
 8000a96:	fa00 f203 	lsl.w	r2, r0, r3
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	430a      	orrs	r2, r1
 8000aa0:	631a      	str	r2, [r3, #48]	; 0x30
 8000aa2:	e01b      	b.n	8000adc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	685a      	ldr	r2, [r3, #4]
 8000aae:	4613      	mov	r3, r2
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	4413      	add	r3, r2
 8000ab4:	3b41      	subs	r3, #65	; 0x41
 8000ab6:	221f      	movs	r2, #31
 8000ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8000abc:	43db      	mvns	r3, r3
 8000abe:	4019      	ands	r1, r3
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	6818      	ldr	r0, [r3, #0]
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	685a      	ldr	r2, [r3, #4]
 8000ac8:	4613      	mov	r3, r2
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	4413      	add	r3, r2
 8000ace:	3b41      	subs	r3, #65	; 0x41
 8000ad0:	fa00 f203 	lsl.w	r2, r0, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	430a      	orrs	r2, r1
 8000ada:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2b09      	cmp	r3, #9
 8000ae2:	d91c      	bls.n	8000b1e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	68d9      	ldr	r1, [r3, #12]
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	4613      	mov	r3, r2
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	4413      	add	r3, r2
 8000af4:	3b1e      	subs	r3, #30
 8000af6:	2207      	movs	r2, #7
 8000af8:	fa02 f303 	lsl.w	r3, r2, r3
 8000afc:	43db      	mvns	r3, r3
 8000afe:	4019      	ands	r1, r3
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	6898      	ldr	r0, [r3, #8]
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	4613      	mov	r3, r2
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	4413      	add	r3, r2
 8000b0e:	3b1e      	subs	r3, #30
 8000b10:	fa00 f203 	lsl.w	r2, r0, r3
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	430a      	orrs	r2, r1
 8000b1a:	60da      	str	r2, [r3, #12]
 8000b1c:	e019      	b.n	8000b52 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	6919      	ldr	r1, [r3, #16]
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	4413      	add	r3, r2
 8000b2e:	2207      	movs	r2, #7
 8000b30:	fa02 f303 	lsl.w	r3, r2, r3
 8000b34:	43db      	mvns	r3, r3
 8000b36:	4019      	ands	r1, r3
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	6898      	ldr	r0, [r3, #8]
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	4613      	mov	r3, r2
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	4413      	add	r3, r2
 8000b46:	fa00 f203 	lsl.w	r2, r0, r3
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	430a      	orrs	r2, r1
 8000b50:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	2b10      	cmp	r3, #16
 8000b58:	d003      	beq.n	8000b62 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000b5e:	2b11      	cmp	r3, #17
 8000b60:	d132      	bne.n	8000bc8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a1d      	ldr	r2, [pc, #116]	; (8000bdc <HAL_ADC_ConfigChannel+0x1e4>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d125      	bne.n	8000bb8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	689b      	ldr	r3, [r3, #8]
 8000b72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d126      	bne.n	8000bc8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	689a      	ldr	r2, [r3, #8]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000b88:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	2b10      	cmp	r3, #16
 8000b90:	d11a      	bne.n	8000bc8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000b92:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <HAL_ADC_ConfigChannel+0x1e8>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a13      	ldr	r2, [pc, #76]	; (8000be4 <HAL_ADC_ConfigChannel+0x1ec>)
 8000b98:	fba2 2303 	umull	r2, r3, r2, r3
 8000b9c:	0c9a      	lsrs	r2, r3, #18
 8000b9e:	4613      	mov	r3, r2
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	4413      	add	r3, r2
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ba8:	e002      	b.n	8000bb0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	3b01      	subs	r3, #1
 8000bae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d1f9      	bne.n	8000baa <HAL_ADC_ConfigChannel+0x1b2>
 8000bb6:	e007      	b.n	8000bc8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bbc:	f043 0220 	orr.w	r2, r3, #32
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3714      	adds	r7, #20
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bc80      	pop	{r7}
 8000bda:	4770      	bx	lr
 8000bdc:	40012400 	.word	0x40012400
 8000be0:	20000000 	.word	0x20000000
 8000be4:	431bde83 	.word	0x431bde83

08000be8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	689b      	ldr	r3, [r3, #8]
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d12e      	bne.n	8000c60 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	689a      	ldr	r2, [r3, #8]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f022 0201 	bic.w	r2, r2, #1
 8000c10:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000c12:	f7ff fe0f 	bl	8000834 <HAL_GetTick>
 8000c16:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000c18:	e01b      	b.n	8000c52 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000c1a:	f7ff fe0b 	bl	8000834 <HAL_GetTick>
 8000c1e:	4602      	mov	r2, r0
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	1ad3      	subs	r3, r2, r3
 8000c24:	2b02      	cmp	r3, #2
 8000c26:	d914      	bls.n	8000c52 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	689b      	ldr	r3, [r3, #8]
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d10d      	bne.n	8000c52 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c3a:	f043 0210 	orr.w	r2, r3, #16
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c46:	f043 0201 	orr.w	r2, r3, #1
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e007      	b.n	8000c62 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	f003 0301 	and.w	r3, r3, #1
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d0dc      	beq.n	8000c1a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
	...

08000c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c88:	4013      	ands	r3, r2
 8000c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c9e:	4a04      	ldr	r2, [pc, #16]	; (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	60d3      	str	r3, [r2, #12]
}
 8000ca4:	bf00      	nop
 8000ca6:	3714      	adds	r7, #20
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb8:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <__NVIC_GetPriorityGrouping+0x18>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	0a1b      	lsrs	r3, r3, #8
 8000cbe:	f003 0307 	and.w	r3, r3, #7
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bc80      	pop	{r7}
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	6039      	str	r1, [r7, #0]
 8000cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db0a      	blt.n	8000cfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	490c      	ldr	r1, [pc, #48]	; (8000d1c <__NVIC_SetPriority+0x4c>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	0112      	lsls	r2, r2, #4
 8000cf0:	b2d2      	uxtb	r2, r2
 8000cf2:	440b      	add	r3, r1
 8000cf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf8:	e00a      	b.n	8000d10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4908      	ldr	r1, [pc, #32]	; (8000d20 <__NVIC_SetPriority+0x50>)
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	f003 030f 	and.w	r3, r3, #15
 8000d06:	3b04      	subs	r3, #4
 8000d08:	0112      	lsls	r2, r2, #4
 8000d0a:	b2d2      	uxtb	r2, r2
 8000d0c:	440b      	add	r3, r1
 8000d0e:	761a      	strb	r2, [r3, #24]
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000e100 	.word	0xe000e100
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b089      	sub	sp, #36	; 0x24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f1c3 0307 	rsb	r3, r3, #7
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	bf28      	it	cs
 8000d42:	2304      	movcs	r3, #4
 8000d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3304      	adds	r3, #4
 8000d4a:	2b06      	cmp	r3, #6
 8000d4c:	d902      	bls.n	8000d54 <NVIC_EncodePriority+0x30>
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3b03      	subs	r3, #3
 8000d52:	e000      	b.n	8000d56 <NVIC_EncodePriority+0x32>
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43da      	mvns	r2, r3
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	401a      	ands	r2, r3
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	fa01 f303 	lsl.w	r3, r1, r3
 8000d76:	43d9      	mvns	r1, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d7c:	4313      	orrs	r3, r2
         );
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3724      	adds	r7, #36	; 0x24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr

08000d88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3b01      	subs	r3, #1
 8000d94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d98:	d301      	bcc.n	8000d9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e00f      	b.n	8000dbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d9e:	4a0a      	ldr	r2, [pc, #40]	; (8000dc8 <SysTick_Config+0x40>)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000da6:	210f      	movs	r1, #15
 8000da8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dac:	f7ff ff90 	bl	8000cd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db0:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <SysTick_Config+0x40>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000db6:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <SysTick_Config+0x40>)
 8000db8:	2207      	movs	r2, #7
 8000dba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	e000e010 	.word	0xe000e010

08000dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f7ff ff49 	bl	8000c6c <__NVIC_SetPriorityGrouping>
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b086      	sub	sp, #24
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	4603      	mov	r3, r0
 8000dea:	60b9      	str	r1, [r7, #8]
 8000dec:	607a      	str	r2, [r7, #4]
 8000dee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000df4:	f7ff ff5e 	bl	8000cb4 <__NVIC_GetPriorityGrouping>
 8000df8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	68b9      	ldr	r1, [r7, #8]
 8000dfe:	6978      	ldr	r0, [r7, #20]
 8000e00:	f7ff ff90 	bl	8000d24 <NVIC_EncodePriority>
 8000e04:	4602      	mov	r2, r0
 8000e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff5f 	bl	8000cd0 <__NVIC_SetPriority>
}
 8000e12:	bf00      	nop
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f7ff ffb0 	bl	8000d88 <SysTick_Config>
 8000e28:	4603      	mov	r3, r0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
	...

08000e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b08b      	sub	sp, #44	; 0x2c
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e42:	2300      	movs	r3, #0
 8000e44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e46:	e169      	b.n	800111c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e48:	2201      	movs	r2, #1
 8000e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	69fa      	ldr	r2, [r7, #28]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	f040 8158 	bne.w	8001116 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	4a9a      	ldr	r2, [pc, #616]	; (80010d4 <HAL_GPIO_Init+0x2a0>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d05e      	beq.n	8000f2e <HAL_GPIO_Init+0xfa>
 8000e70:	4a98      	ldr	r2, [pc, #608]	; (80010d4 <HAL_GPIO_Init+0x2a0>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d875      	bhi.n	8000f62 <HAL_GPIO_Init+0x12e>
 8000e76:	4a98      	ldr	r2, [pc, #608]	; (80010d8 <HAL_GPIO_Init+0x2a4>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d058      	beq.n	8000f2e <HAL_GPIO_Init+0xfa>
 8000e7c:	4a96      	ldr	r2, [pc, #600]	; (80010d8 <HAL_GPIO_Init+0x2a4>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d86f      	bhi.n	8000f62 <HAL_GPIO_Init+0x12e>
 8000e82:	4a96      	ldr	r2, [pc, #600]	; (80010dc <HAL_GPIO_Init+0x2a8>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d052      	beq.n	8000f2e <HAL_GPIO_Init+0xfa>
 8000e88:	4a94      	ldr	r2, [pc, #592]	; (80010dc <HAL_GPIO_Init+0x2a8>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d869      	bhi.n	8000f62 <HAL_GPIO_Init+0x12e>
 8000e8e:	4a94      	ldr	r2, [pc, #592]	; (80010e0 <HAL_GPIO_Init+0x2ac>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d04c      	beq.n	8000f2e <HAL_GPIO_Init+0xfa>
 8000e94:	4a92      	ldr	r2, [pc, #584]	; (80010e0 <HAL_GPIO_Init+0x2ac>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d863      	bhi.n	8000f62 <HAL_GPIO_Init+0x12e>
 8000e9a:	4a92      	ldr	r2, [pc, #584]	; (80010e4 <HAL_GPIO_Init+0x2b0>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d046      	beq.n	8000f2e <HAL_GPIO_Init+0xfa>
 8000ea0:	4a90      	ldr	r2, [pc, #576]	; (80010e4 <HAL_GPIO_Init+0x2b0>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d85d      	bhi.n	8000f62 <HAL_GPIO_Init+0x12e>
 8000ea6:	2b12      	cmp	r3, #18
 8000ea8:	d82a      	bhi.n	8000f00 <HAL_GPIO_Init+0xcc>
 8000eaa:	2b12      	cmp	r3, #18
 8000eac:	d859      	bhi.n	8000f62 <HAL_GPIO_Init+0x12e>
 8000eae:	a201      	add	r2, pc, #4	; (adr r2, 8000eb4 <HAL_GPIO_Init+0x80>)
 8000eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eb4:	08000f2f 	.word	0x08000f2f
 8000eb8:	08000f09 	.word	0x08000f09
 8000ebc:	08000f1b 	.word	0x08000f1b
 8000ec0:	08000f5d 	.word	0x08000f5d
 8000ec4:	08000f63 	.word	0x08000f63
 8000ec8:	08000f63 	.word	0x08000f63
 8000ecc:	08000f63 	.word	0x08000f63
 8000ed0:	08000f63 	.word	0x08000f63
 8000ed4:	08000f63 	.word	0x08000f63
 8000ed8:	08000f63 	.word	0x08000f63
 8000edc:	08000f63 	.word	0x08000f63
 8000ee0:	08000f63 	.word	0x08000f63
 8000ee4:	08000f63 	.word	0x08000f63
 8000ee8:	08000f63 	.word	0x08000f63
 8000eec:	08000f63 	.word	0x08000f63
 8000ef0:	08000f63 	.word	0x08000f63
 8000ef4:	08000f63 	.word	0x08000f63
 8000ef8:	08000f11 	.word	0x08000f11
 8000efc:	08000f25 	.word	0x08000f25
 8000f00:	4a79      	ldr	r2, [pc, #484]	; (80010e8 <HAL_GPIO_Init+0x2b4>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d013      	beq.n	8000f2e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f06:	e02c      	b.n	8000f62 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	623b      	str	r3, [r7, #32]
          break;
 8000f0e:	e029      	b.n	8000f64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	3304      	adds	r3, #4
 8000f16:	623b      	str	r3, [r7, #32]
          break;
 8000f18:	e024      	b.n	8000f64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	68db      	ldr	r3, [r3, #12]
 8000f1e:	3308      	adds	r3, #8
 8000f20:	623b      	str	r3, [r7, #32]
          break;
 8000f22:	e01f      	b.n	8000f64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	330c      	adds	r3, #12
 8000f2a:	623b      	str	r3, [r7, #32]
          break;
 8000f2c:	e01a      	b.n	8000f64 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d102      	bne.n	8000f3c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f36:	2304      	movs	r3, #4
 8000f38:	623b      	str	r3, [r7, #32]
          break;
 8000f3a:	e013      	b.n	8000f64 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d105      	bne.n	8000f50 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f44:	2308      	movs	r3, #8
 8000f46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	69fa      	ldr	r2, [r7, #28]
 8000f4c:	611a      	str	r2, [r3, #16]
          break;
 8000f4e:	e009      	b.n	8000f64 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f50:	2308      	movs	r3, #8
 8000f52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	69fa      	ldr	r2, [r7, #28]
 8000f58:	615a      	str	r2, [r3, #20]
          break;
 8000f5a:	e003      	b.n	8000f64 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	623b      	str	r3, [r7, #32]
          break;
 8000f60:	e000      	b.n	8000f64 <HAL_GPIO_Init+0x130>
          break;
 8000f62:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	2bff      	cmp	r3, #255	; 0xff
 8000f68:	d801      	bhi.n	8000f6e <HAL_GPIO_Init+0x13a>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	e001      	b.n	8000f72 <HAL_GPIO_Init+0x13e>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3304      	adds	r3, #4
 8000f72:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	2bff      	cmp	r3, #255	; 0xff
 8000f78:	d802      	bhi.n	8000f80 <HAL_GPIO_Init+0x14c>
 8000f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	e002      	b.n	8000f86 <HAL_GPIO_Init+0x152>
 8000f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f82:	3b08      	subs	r3, #8
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	210f      	movs	r1, #15
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	fa01 f303 	lsl.w	r3, r1, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	401a      	ands	r2, r3
 8000f98:	6a39      	ldr	r1, [r7, #32]
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa0:	431a      	orrs	r2, r3
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	f000 80b1 	beq.w	8001116 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fb4:	4b4d      	ldr	r3, [pc, #308]	; (80010ec <HAL_GPIO_Init+0x2b8>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	4a4c      	ldr	r2, [pc, #304]	; (80010ec <HAL_GPIO_Init+0x2b8>)
 8000fba:	f043 0301 	orr.w	r3, r3, #1
 8000fbe:	6193      	str	r3, [r2, #24]
 8000fc0:	4b4a      	ldr	r3, [pc, #296]	; (80010ec <HAL_GPIO_Init+0x2b8>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fcc:	4a48      	ldr	r2, [pc, #288]	; (80010f0 <HAL_GPIO_Init+0x2bc>)
 8000fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd0:	089b      	lsrs	r3, r3, #2
 8000fd2:	3302      	adds	r3, #2
 8000fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fdc:	f003 0303 	and.w	r3, r3, #3
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	220f      	movs	r2, #15
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	68fa      	ldr	r2, [r7, #12]
 8000fec:	4013      	ands	r3, r2
 8000fee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4a40      	ldr	r2, [pc, #256]	; (80010f4 <HAL_GPIO_Init+0x2c0>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d013      	beq.n	8001020 <HAL_GPIO_Init+0x1ec>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a3f      	ldr	r2, [pc, #252]	; (80010f8 <HAL_GPIO_Init+0x2c4>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d00d      	beq.n	800101c <HAL_GPIO_Init+0x1e8>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4a3e      	ldr	r2, [pc, #248]	; (80010fc <HAL_GPIO_Init+0x2c8>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d007      	beq.n	8001018 <HAL_GPIO_Init+0x1e4>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a3d      	ldr	r2, [pc, #244]	; (8001100 <HAL_GPIO_Init+0x2cc>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d101      	bne.n	8001014 <HAL_GPIO_Init+0x1e0>
 8001010:	2303      	movs	r3, #3
 8001012:	e006      	b.n	8001022 <HAL_GPIO_Init+0x1ee>
 8001014:	2304      	movs	r3, #4
 8001016:	e004      	b.n	8001022 <HAL_GPIO_Init+0x1ee>
 8001018:	2302      	movs	r3, #2
 800101a:	e002      	b.n	8001022 <HAL_GPIO_Init+0x1ee>
 800101c:	2301      	movs	r3, #1
 800101e:	e000      	b.n	8001022 <HAL_GPIO_Init+0x1ee>
 8001020:	2300      	movs	r3, #0
 8001022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001024:	f002 0203 	and.w	r2, r2, #3
 8001028:	0092      	lsls	r2, r2, #2
 800102a:	4093      	lsls	r3, r2
 800102c:	68fa      	ldr	r2, [r7, #12]
 800102e:	4313      	orrs	r3, r2
 8001030:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001032:	492f      	ldr	r1, [pc, #188]	; (80010f0 <HAL_GPIO_Init+0x2bc>)
 8001034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001036:	089b      	lsrs	r3, r3, #2
 8001038:	3302      	adds	r3, #2
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d006      	beq.n	800105a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800104c:	4b2d      	ldr	r3, [pc, #180]	; (8001104 <HAL_GPIO_Init+0x2d0>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	492c      	ldr	r1, [pc, #176]	; (8001104 <HAL_GPIO_Init+0x2d0>)
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	4313      	orrs	r3, r2
 8001056:	600b      	str	r3, [r1, #0]
 8001058:	e006      	b.n	8001068 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800105a:	4b2a      	ldr	r3, [pc, #168]	; (8001104 <HAL_GPIO_Init+0x2d0>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	43db      	mvns	r3, r3
 8001062:	4928      	ldr	r1, [pc, #160]	; (8001104 <HAL_GPIO_Init+0x2d0>)
 8001064:	4013      	ands	r3, r2
 8001066:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d006      	beq.n	8001082 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001074:	4b23      	ldr	r3, [pc, #140]	; (8001104 <HAL_GPIO_Init+0x2d0>)
 8001076:	685a      	ldr	r2, [r3, #4]
 8001078:	4922      	ldr	r1, [pc, #136]	; (8001104 <HAL_GPIO_Init+0x2d0>)
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	4313      	orrs	r3, r2
 800107e:	604b      	str	r3, [r1, #4]
 8001080:	e006      	b.n	8001090 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001082:	4b20      	ldr	r3, [pc, #128]	; (8001104 <HAL_GPIO_Init+0x2d0>)
 8001084:	685a      	ldr	r2, [r3, #4]
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	43db      	mvns	r3, r3
 800108a:	491e      	ldr	r1, [pc, #120]	; (8001104 <HAL_GPIO_Init+0x2d0>)
 800108c:	4013      	ands	r3, r2
 800108e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d006      	beq.n	80010aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800109c:	4b19      	ldr	r3, [pc, #100]	; (8001104 <HAL_GPIO_Init+0x2d0>)
 800109e:	689a      	ldr	r2, [r3, #8]
 80010a0:	4918      	ldr	r1, [pc, #96]	; (8001104 <HAL_GPIO_Init+0x2d0>)
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	608b      	str	r3, [r1, #8]
 80010a8:	e006      	b.n	80010b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010aa:	4b16      	ldr	r3, [pc, #88]	; (8001104 <HAL_GPIO_Init+0x2d0>)
 80010ac:	689a      	ldr	r2, [r3, #8]
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	43db      	mvns	r3, r3
 80010b2:	4914      	ldr	r1, [pc, #80]	; (8001104 <HAL_GPIO_Init+0x2d0>)
 80010b4:	4013      	ands	r3, r2
 80010b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d021      	beq.n	8001108 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010c4:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <HAL_GPIO_Init+0x2d0>)
 80010c6:	68da      	ldr	r2, [r3, #12]
 80010c8:	490e      	ldr	r1, [pc, #56]	; (8001104 <HAL_GPIO_Init+0x2d0>)
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	60cb      	str	r3, [r1, #12]
 80010d0:	e021      	b.n	8001116 <HAL_GPIO_Init+0x2e2>
 80010d2:	bf00      	nop
 80010d4:	10320000 	.word	0x10320000
 80010d8:	10310000 	.word	0x10310000
 80010dc:	10220000 	.word	0x10220000
 80010e0:	10210000 	.word	0x10210000
 80010e4:	10120000 	.word	0x10120000
 80010e8:	10110000 	.word	0x10110000
 80010ec:	40021000 	.word	0x40021000
 80010f0:	40010000 	.word	0x40010000
 80010f4:	40010800 	.word	0x40010800
 80010f8:	40010c00 	.word	0x40010c00
 80010fc:	40011000 	.word	0x40011000
 8001100:	40011400 	.word	0x40011400
 8001104:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001108:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <HAL_GPIO_Init+0x304>)
 800110a:	68da      	ldr	r2, [r3, #12]
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	43db      	mvns	r3, r3
 8001110:	4909      	ldr	r1, [pc, #36]	; (8001138 <HAL_GPIO_Init+0x304>)
 8001112:	4013      	ands	r3, r2
 8001114:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001118:	3301      	adds	r3, #1
 800111a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001122:	fa22 f303 	lsr.w	r3, r2, r3
 8001126:	2b00      	cmp	r3, #0
 8001128:	f47f ae8e 	bne.w	8000e48 <HAL_GPIO_Init+0x14>
  }
}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	372c      	adds	r7, #44	; 0x2c
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr
 8001138:	40010400 	.word	0x40010400

0800113c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	460b      	mov	r3, r1
 8001146:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	689a      	ldr	r2, [r3, #8]
 800114c:	887b      	ldrh	r3, [r7, #2]
 800114e:	4013      	ands	r3, r2
 8001150:	2b00      	cmp	r3, #0
 8001152:	d002      	beq.n	800115a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001154:	2301      	movs	r3, #1
 8001156:	73fb      	strb	r3, [r7, #15]
 8001158:	e001      	b.n	800115e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800115a:	2300      	movs	r3, #0
 800115c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800115e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001160:	4618      	mov	r0, r3
 8001162:	3714      	adds	r7, #20
 8001164:	46bd      	mov	sp, r7
 8001166:	bc80      	pop	{r7}
 8001168:	4770      	bx	lr

0800116a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800116a:	b480      	push	{r7}
 800116c:	b083      	sub	sp, #12
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
 8001172:	460b      	mov	r3, r1
 8001174:	807b      	strh	r3, [r7, #2]
 8001176:	4613      	mov	r3, r2
 8001178:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800117a:	787b      	ldrb	r3, [r7, #1]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d003      	beq.n	8001188 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001180:	887a      	ldrh	r2, [r7, #2]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001186:	e003      	b.n	8001190 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001188:	887b      	ldrh	r3, [r7, #2]
 800118a:	041a      	lsls	r2, r3, #16
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	611a      	str	r2, [r3, #16]
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	bc80      	pop	{r7}
 8001198:	4770      	bx	lr
	...

0800119c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d101      	bne.n	80011ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e272      	b.n	8001694 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	f000 8087 	beq.w	80012ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011bc:	4b92      	ldr	r3, [pc, #584]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f003 030c 	and.w	r3, r3, #12
 80011c4:	2b04      	cmp	r3, #4
 80011c6:	d00c      	beq.n	80011e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011c8:	4b8f      	ldr	r3, [pc, #572]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f003 030c 	and.w	r3, r3, #12
 80011d0:	2b08      	cmp	r3, #8
 80011d2:	d112      	bne.n	80011fa <HAL_RCC_OscConfig+0x5e>
 80011d4:	4b8c      	ldr	r3, [pc, #560]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011e0:	d10b      	bne.n	80011fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011e2:	4b89      	ldr	r3, [pc, #548]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d06c      	beq.n	80012c8 <HAL_RCC_OscConfig+0x12c>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d168      	bne.n	80012c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e24c      	b.n	8001694 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001202:	d106      	bne.n	8001212 <HAL_RCC_OscConfig+0x76>
 8001204:	4b80      	ldr	r3, [pc, #512]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a7f      	ldr	r2, [pc, #508]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 800120a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800120e:	6013      	str	r3, [r2, #0]
 8001210:	e02e      	b.n	8001270 <HAL_RCC_OscConfig+0xd4>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d10c      	bne.n	8001234 <HAL_RCC_OscConfig+0x98>
 800121a:	4b7b      	ldr	r3, [pc, #492]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a7a      	ldr	r2, [pc, #488]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 8001220:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001224:	6013      	str	r3, [r2, #0]
 8001226:	4b78      	ldr	r3, [pc, #480]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a77      	ldr	r2, [pc, #476]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 800122c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001230:	6013      	str	r3, [r2, #0]
 8001232:	e01d      	b.n	8001270 <HAL_RCC_OscConfig+0xd4>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800123c:	d10c      	bne.n	8001258 <HAL_RCC_OscConfig+0xbc>
 800123e:	4b72      	ldr	r3, [pc, #456]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a71      	ldr	r2, [pc, #452]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 8001244:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001248:	6013      	str	r3, [r2, #0]
 800124a:	4b6f      	ldr	r3, [pc, #444]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a6e      	ldr	r2, [pc, #440]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 8001250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001254:	6013      	str	r3, [r2, #0]
 8001256:	e00b      	b.n	8001270 <HAL_RCC_OscConfig+0xd4>
 8001258:	4b6b      	ldr	r3, [pc, #428]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a6a      	ldr	r2, [pc, #424]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 800125e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001262:	6013      	str	r3, [r2, #0]
 8001264:	4b68      	ldr	r3, [pc, #416]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a67      	ldr	r2, [pc, #412]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 800126a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800126e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d013      	beq.n	80012a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001278:	f7ff fadc 	bl	8000834 <HAL_GetTick>
 800127c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800127e:	e008      	b.n	8001292 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001280:	f7ff fad8 	bl	8000834 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b64      	cmp	r3, #100	; 0x64
 800128c:	d901      	bls.n	8001292 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e200      	b.n	8001694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001292:	4b5d      	ldr	r3, [pc, #372]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d0f0      	beq.n	8001280 <HAL_RCC_OscConfig+0xe4>
 800129e:	e014      	b.n	80012ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a0:	f7ff fac8 	bl	8000834 <HAL_GetTick>
 80012a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012a6:	e008      	b.n	80012ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012a8:	f7ff fac4 	bl	8000834 <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b64      	cmp	r3, #100	; 0x64
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e1ec      	b.n	8001694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ba:	4b53      	ldr	r3, [pc, #332]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1f0      	bne.n	80012a8 <HAL_RCC_OscConfig+0x10c>
 80012c6:	e000      	b.n	80012ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0302 	and.w	r3, r3, #2
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d063      	beq.n	800139e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012d6:	4b4c      	ldr	r3, [pc, #304]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f003 030c 	and.w	r3, r3, #12
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d00b      	beq.n	80012fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012e2:	4b49      	ldr	r3, [pc, #292]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f003 030c 	and.w	r3, r3, #12
 80012ea:	2b08      	cmp	r3, #8
 80012ec:	d11c      	bne.n	8001328 <HAL_RCC_OscConfig+0x18c>
 80012ee:	4b46      	ldr	r3, [pc, #280]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d116      	bne.n	8001328 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012fa:	4b43      	ldr	r3, [pc, #268]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d005      	beq.n	8001312 <HAL_RCC_OscConfig+0x176>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	691b      	ldr	r3, [r3, #16]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d001      	beq.n	8001312 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e1c0      	b.n	8001694 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001312:	4b3d      	ldr	r3, [pc, #244]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	695b      	ldr	r3, [r3, #20]
 800131e:	00db      	lsls	r3, r3, #3
 8001320:	4939      	ldr	r1, [pc, #228]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 8001322:	4313      	orrs	r3, r2
 8001324:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001326:	e03a      	b.n	800139e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	691b      	ldr	r3, [r3, #16]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d020      	beq.n	8001372 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001330:	4b36      	ldr	r3, [pc, #216]	; (800140c <HAL_RCC_OscConfig+0x270>)
 8001332:	2201      	movs	r2, #1
 8001334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001336:	f7ff fa7d 	bl	8000834 <HAL_GetTick>
 800133a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800133c:	e008      	b.n	8001350 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800133e:	f7ff fa79 	bl	8000834 <HAL_GetTick>
 8001342:	4602      	mov	r2, r0
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b02      	cmp	r3, #2
 800134a:	d901      	bls.n	8001350 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	e1a1      	b.n	8001694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001350:	4b2d      	ldr	r3, [pc, #180]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	2b00      	cmp	r3, #0
 800135a:	d0f0      	beq.n	800133e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800135c:	4b2a      	ldr	r3, [pc, #168]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	695b      	ldr	r3, [r3, #20]
 8001368:	00db      	lsls	r3, r3, #3
 800136a:	4927      	ldr	r1, [pc, #156]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 800136c:	4313      	orrs	r3, r2
 800136e:	600b      	str	r3, [r1, #0]
 8001370:	e015      	b.n	800139e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001372:	4b26      	ldr	r3, [pc, #152]	; (800140c <HAL_RCC_OscConfig+0x270>)
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001378:	f7ff fa5c 	bl	8000834 <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001380:	f7ff fa58 	bl	8000834 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b02      	cmp	r3, #2
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e180      	b.n	8001694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001392:	4b1d      	ldr	r3, [pc, #116]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1f0      	bne.n	8001380 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0308 	and.w	r3, r3, #8
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d03a      	beq.n	8001420 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	699b      	ldr	r3, [r3, #24]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d019      	beq.n	80013e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013b2:	4b17      	ldr	r3, [pc, #92]	; (8001410 <HAL_RCC_OscConfig+0x274>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b8:	f7ff fa3c 	bl	8000834 <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013c0:	f7ff fa38 	bl	8000834 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e160      	b.n	8001694 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013d2:	4b0d      	ldr	r3, [pc, #52]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 80013d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d0f0      	beq.n	80013c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013de:	2001      	movs	r0, #1
 80013e0:	f000 faa6 	bl	8001930 <RCC_Delay>
 80013e4:	e01c      	b.n	8001420 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013e6:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <HAL_RCC_OscConfig+0x274>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ec:	f7ff fa22 	bl	8000834 <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013f2:	e00f      	b.n	8001414 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013f4:	f7ff fa1e 	bl	8000834 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d908      	bls.n	8001414 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e146      	b.n	8001694 <HAL_RCC_OscConfig+0x4f8>
 8001406:	bf00      	nop
 8001408:	40021000 	.word	0x40021000
 800140c:	42420000 	.word	0x42420000
 8001410:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001414:	4b92      	ldr	r3, [pc, #584]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 8001416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001418:	f003 0302 	and.w	r3, r3, #2
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1e9      	bne.n	80013f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0304 	and.w	r3, r3, #4
 8001428:	2b00      	cmp	r3, #0
 800142a:	f000 80a6 	beq.w	800157a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800142e:	2300      	movs	r3, #0
 8001430:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001432:	4b8b      	ldr	r3, [pc, #556]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 8001434:	69db      	ldr	r3, [r3, #28]
 8001436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d10d      	bne.n	800145a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800143e:	4b88      	ldr	r3, [pc, #544]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	4a87      	ldr	r2, [pc, #540]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 8001444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001448:	61d3      	str	r3, [r2, #28]
 800144a:	4b85      	ldr	r3, [pc, #532]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001452:	60bb      	str	r3, [r7, #8]
 8001454:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001456:	2301      	movs	r3, #1
 8001458:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800145a:	4b82      	ldr	r3, [pc, #520]	; (8001664 <HAL_RCC_OscConfig+0x4c8>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001462:	2b00      	cmp	r3, #0
 8001464:	d118      	bne.n	8001498 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001466:	4b7f      	ldr	r3, [pc, #508]	; (8001664 <HAL_RCC_OscConfig+0x4c8>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a7e      	ldr	r2, [pc, #504]	; (8001664 <HAL_RCC_OscConfig+0x4c8>)
 800146c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001470:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001472:	f7ff f9df 	bl	8000834 <HAL_GetTick>
 8001476:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001478:	e008      	b.n	800148c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800147a:	f7ff f9db 	bl	8000834 <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b64      	cmp	r3, #100	; 0x64
 8001486:	d901      	bls.n	800148c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e103      	b.n	8001694 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800148c:	4b75      	ldr	r3, [pc, #468]	; (8001664 <HAL_RCC_OscConfig+0x4c8>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001494:	2b00      	cmp	r3, #0
 8001496:	d0f0      	beq.n	800147a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d106      	bne.n	80014ae <HAL_RCC_OscConfig+0x312>
 80014a0:	4b6f      	ldr	r3, [pc, #444]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 80014a2:	6a1b      	ldr	r3, [r3, #32]
 80014a4:	4a6e      	ldr	r2, [pc, #440]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 80014a6:	f043 0301 	orr.w	r3, r3, #1
 80014aa:	6213      	str	r3, [r2, #32]
 80014ac:	e02d      	b.n	800150a <HAL_RCC_OscConfig+0x36e>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d10c      	bne.n	80014d0 <HAL_RCC_OscConfig+0x334>
 80014b6:	4b6a      	ldr	r3, [pc, #424]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 80014b8:	6a1b      	ldr	r3, [r3, #32]
 80014ba:	4a69      	ldr	r2, [pc, #420]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 80014bc:	f023 0301 	bic.w	r3, r3, #1
 80014c0:	6213      	str	r3, [r2, #32]
 80014c2:	4b67      	ldr	r3, [pc, #412]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 80014c4:	6a1b      	ldr	r3, [r3, #32]
 80014c6:	4a66      	ldr	r2, [pc, #408]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 80014c8:	f023 0304 	bic.w	r3, r3, #4
 80014cc:	6213      	str	r3, [r2, #32]
 80014ce:	e01c      	b.n	800150a <HAL_RCC_OscConfig+0x36e>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	2b05      	cmp	r3, #5
 80014d6:	d10c      	bne.n	80014f2 <HAL_RCC_OscConfig+0x356>
 80014d8:	4b61      	ldr	r3, [pc, #388]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 80014da:	6a1b      	ldr	r3, [r3, #32]
 80014dc:	4a60      	ldr	r2, [pc, #384]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 80014de:	f043 0304 	orr.w	r3, r3, #4
 80014e2:	6213      	str	r3, [r2, #32]
 80014e4:	4b5e      	ldr	r3, [pc, #376]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 80014e6:	6a1b      	ldr	r3, [r3, #32]
 80014e8:	4a5d      	ldr	r2, [pc, #372]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 80014ea:	f043 0301 	orr.w	r3, r3, #1
 80014ee:	6213      	str	r3, [r2, #32]
 80014f0:	e00b      	b.n	800150a <HAL_RCC_OscConfig+0x36e>
 80014f2:	4b5b      	ldr	r3, [pc, #364]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 80014f4:	6a1b      	ldr	r3, [r3, #32]
 80014f6:	4a5a      	ldr	r2, [pc, #360]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 80014f8:	f023 0301 	bic.w	r3, r3, #1
 80014fc:	6213      	str	r3, [r2, #32]
 80014fe:	4b58      	ldr	r3, [pc, #352]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 8001500:	6a1b      	ldr	r3, [r3, #32]
 8001502:	4a57      	ldr	r2, [pc, #348]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 8001504:	f023 0304 	bic.w	r3, r3, #4
 8001508:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d015      	beq.n	800153e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001512:	f7ff f98f 	bl	8000834 <HAL_GetTick>
 8001516:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001518:	e00a      	b.n	8001530 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800151a:	f7ff f98b 	bl	8000834 <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	f241 3288 	movw	r2, #5000	; 0x1388
 8001528:	4293      	cmp	r3, r2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e0b1      	b.n	8001694 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001530:	4b4b      	ldr	r3, [pc, #300]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 8001532:	6a1b      	ldr	r3, [r3, #32]
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	2b00      	cmp	r3, #0
 800153a:	d0ee      	beq.n	800151a <HAL_RCC_OscConfig+0x37e>
 800153c:	e014      	b.n	8001568 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800153e:	f7ff f979 	bl	8000834 <HAL_GetTick>
 8001542:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001544:	e00a      	b.n	800155c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001546:	f7ff f975 	bl	8000834 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	f241 3288 	movw	r2, #5000	; 0x1388
 8001554:	4293      	cmp	r3, r2
 8001556:	d901      	bls.n	800155c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e09b      	b.n	8001694 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800155c:	4b40      	ldr	r3, [pc, #256]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 800155e:	6a1b      	ldr	r3, [r3, #32]
 8001560:	f003 0302 	and.w	r3, r3, #2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1ee      	bne.n	8001546 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001568:	7dfb      	ldrb	r3, [r7, #23]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d105      	bne.n	800157a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800156e:	4b3c      	ldr	r3, [pc, #240]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	4a3b      	ldr	r2, [pc, #236]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 8001574:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001578:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	2b00      	cmp	r3, #0
 8001580:	f000 8087 	beq.w	8001692 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001584:	4b36      	ldr	r3, [pc, #216]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f003 030c 	and.w	r3, r3, #12
 800158c:	2b08      	cmp	r3, #8
 800158e:	d061      	beq.n	8001654 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	69db      	ldr	r3, [r3, #28]
 8001594:	2b02      	cmp	r3, #2
 8001596:	d146      	bne.n	8001626 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001598:	4b33      	ldr	r3, [pc, #204]	; (8001668 <HAL_RCC_OscConfig+0x4cc>)
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159e:	f7ff f949 	bl	8000834 <HAL_GetTick>
 80015a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015a4:	e008      	b.n	80015b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015a6:	f7ff f945 	bl	8000834 <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e06d      	b.n	8001694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015b8:	4b29      	ldr	r3, [pc, #164]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d1f0      	bne.n	80015a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a1b      	ldr	r3, [r3, #32]
 80015c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015cc:	d108      	bne.n	80015e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015ce:	4b24      	ldr	r3, [pc, #144]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	4921      	ldr	r1, [pc, #132]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 80015dc:	4313      	orrs	r3, r2
 80015de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015e0:	4b1f      	ldr	r3, [pc, #124]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a19      	ldr	r1, [r3, #32]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f0:	430b      	orrs	r3, r1
 80015f2:	491b      	ldr	r1, [pc, #108]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 80015f4:	4313      	orrs	r3, r2
 80015f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015f8:	4b1b      	ldr	r3, [pc, #108]	; (8001668 <HAL_RCC_OscConfig+0x4cc>)
 80015fa:	2201      	movs	r2, #1
 80015fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fe:	f7ff f919 	bl	8000834 <HAL_GetTick>
 8001602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001604:	e008      	b.n	8001618 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001606:	f7ff f915 	bl	8000834 <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b02      	cmp	r3, #2
 8001612:	d901      	bls.n	8001618 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e03d      	b.n	8001694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001618:	4b11      	ldr	r3, [pc, #68]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d0f0      	beq.n	8001606 <HAL_RCC_OscConfig+0x46a>
 8001624:	e035      	b.n	8001692 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001626:	4b10      	ldr	r3, [pc, #64]	; (8001668 <HAL_RCC_OscConfig+0x4cc>)
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162c:	f7ff f902 	bl	8000834 <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001634:	f7ff f8fe 	bl	8000834 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e026      	b.n	8001694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001646:	4b06      	ldr	r3, [pc, #24]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1f0      	bne.n	8001634 <HAL_RCC_OscConfig+0x498>
 8001652:	e01e      	b.n	8001692 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	69db      	ldr	r3, [r3, #28]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d107      	bne.n	800166c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e019      	b.n	8001694 <HAL_RCC_OscConfig+0x4f8>
 8001660:	40021000 	.word	0x40021000
 8001664:	40007000 	.word	0x40007000
 8001668:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800166c:	4b0b      	ldr	r3, [pc, #44]	; (800169c <HAL_RCC_OscConfig+0x500>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a1b      	ldr	r3, [r3, #32]
 800167c:	429a      	cmp	r2, r3
 800167e:	d106      	bne.n	800168e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800168a:	429a      	cmp	r2, r3
 800168c:	d001      	beq.n	8001692 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e000      	b.n	8001694 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001692:	2300      	movs	r3, #0
}
 8001694:	4618      	mov	r0, r3
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40021000 	.word	0x40021000

080016a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d101      	bne.n	80016b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e0d0      	b.n	8001856 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016b4:	4b6a      	ldr	r3, [pc, #424]	; (8001860 <HAL_RCC_ClockConfig+0x1c0>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0307 	and.w	r3, r3, #7
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d910      	bls.n	80016e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016c2:	4b67      	ldr	r3, [pc, #412]	; (8001860 <HAL_RCC_ClockConfig+0x1c0>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f023 0207 	bic.w	r2, r3, #7
 80016ca:	4965      	ldr	r1, [pc, #404]	; (8001860 <HAL_RCC_ClockConfig+0x1c0>)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016d2:	4b63      	ldr	r3, [pc, #396]	; (8001860 <HAL_RCC_ClockConfig+0x1c0>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	683a      	ldr	r2, [r7, #0]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d001      	beq.n	80016e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e0b8      	b.n	8001856 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d020      	beq.n	8001732 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0304 	and.w	r3, r3, #4
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d005      	beq.n	8001708 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016fc:	4b59      	ldr	r3, [pc, #356]	; (8001864 <HAL_RCC_ClockConfig+0x1c4>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	4a58      	ldr	r2, [pc, #352]	; (8001864 <HAL_RCC_ClockConfig+0x1c4>)
 8001702:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001706:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0308 	and.w	r3, r3, #8
 8001710:	2b00      	cmp	r3, #0
 8001712:	d005      	beq.n	8001720 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001714:	4b53      	ldr	r3, [pc, #332]	; (8001864 <HAL_RCC_ClockConfig+0x1c4>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	4a52      	ldr	r2, [pc, #328]	; (8001864 <HAL_RCC_ClockConfig+0x1c4>)
 800171a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800171e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001720:	4b50      	ldr	r3, [pc, #320]	; (8001864 <HAL_RCC_ClockConfig+0x1c4>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	494d      	ldr	r1, [pc, #308]	; (8001864 <HAL_RCC_ClockConfig+0x1c4>)
 800172e:	4313      	orrs	r3, r2
 8001730:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	2b00      	cmp	r3, #0
 800173c:	d040      	beq.n	80017c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d107      	bne.n	8001756 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001746:	4b47      	ldr	r3, [pc, #284]	; (8001864 <HAL_RCC_ClockConfig+0x1c4>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d115      	bne.n	800177e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e07f      	b.n	8001856 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b02      	cmp	r3, #2
 800175c:	d107      	bne.n	800176e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800175e:	4b41      	ldr	r3, [pc, #260]	; (8001864 <HAL_RCC_ClockConfig+0x1c4>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d109      	bne.n	800177e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e073      	b.n	8001856 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800176e:	4b3d      	ldr	r3, [pc, #244]	; (8001864 <HAL_RCC_ClockConfig+0x1c4>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d101      	bne.n	800177e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e06b      	b.n	8001856 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800177e:	4b39      	ldr	r3, [pc, #228]	; (8001864 <HAL_RCC_ClockConfig+0x1c4>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f023 0203 	bic.w	r2, r3, #3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	4936      	ldr	r1, [pc, #216]	; (8001864 <HAL_RCC_ClockConfig+0x1c4>)
 800178c:	4313      	orrs	r3, r2
 800178e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001790:	f7ff f850 	bl	8000834 <HAL_GetTick>
 8001794:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001796:	e00a      	b.n	80017ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001798:	f7ff f84c 	bl	8000834 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e053      	b.n	8001856 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ae:	4b2d      	ldr	r3, [pc, #180]	; (8001864 <HAL_RCC_ClockConfig+0x1c4>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f003 020c 	and.w	r2, r3, #12
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	429a      	cmp	r2, r3
 80017be:	d1eb      	bne.n	8001798 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017c0:	4b27      	ldr	r3, [pc, #156]	; (8001860 <HAL_RCC_ClockConfig+0x1c0>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0307 	and.w	r3, r3, #7
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d210      	bcs.n	80017f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ce:	4b24      	ldr	r3, [pc, #144]	; (8001860 <HAL_RCC_ClockConfig+0x1c0>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f023 0207 	bic.w	r2, r3, #7
 80017d6:	4922      	ldr	r1, [pc, #136]	; (8001860 <HAL_RCC_ClockConfig+0x1c0>)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	4313      	orrs	r3, r2
 80017dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017de:	4b20      	ldr	r3, [pc, #128]	; (8001860 <HAL_RCC_ClockConfig+0x1c0>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	683a      	ldr	r2, [r7, #0]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d001      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e032      	b.n	8001856 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0304 	and.w	r3, r3, #4
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d008      	beq.n	800180e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017fc:	4b19      	ldr	r3, [pc, #100]	; (8001864 <HAL_RCC_ClockConfig+0x1c4>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	4916      	ldr	r1, [pc, #88]	; (8001864 <HAL_RCC_ClockConfig+0x1c4>)
 800180a:	4313      	orrs	r3, r2
 800180c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0308 	and.w	r3, r3, #8
 8001816:	2b00      	cmp	r3, #0
 8001818:	d009      	beq.n	800182e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800181a:	4b12      	ldr	r3, [pc, #72]	; (8001864 <HAL_RCC_ClockConfig+0x1c4>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	490e      	ldr	r1, [pc, #56]	; (8001864 <HAL_RCC_ClockConfig+0x1c4>)
 800182a:	4313      	orrs	r3, r2
 800182c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800182e:	f000 f821 	bl	8001874 <HAL_RCC_GetSysClockFreq>
 8001832:	4602      	mov	r2, r0
 8001834:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <HAL_RCC_ClockConfig+0x1c4>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	091b      	lsrs	r3, r3, #4
 800183a:	f003 030f 	and.w	r3, r3, #15
 800183e:	490a      	ldr	r1, [pc, #40]	; (8001868 <HAL_RCC_ClockConfig+0x1c8>)
 8001840:	5ccb      	ldrb	r3, [r1, r3]
 8001842:	fa22 f303 	lsr.w	r3, r2, r3
 8001846:	4a09      	ldr	r2, [pc, #36]	; (800186c <HAL_RCC_ClockConfig+0x1cc>)
 8001848:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800184a:	4b09      	ldr	r3, [pc, #36]	; (8001870 <HAL_RCC_ClockConfig+0x1d0>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4618      	mov	r0, r3
 8001850:	f7fe ffae 	bl	80007b0 <HAL_InitTick>

  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40022000 	.word	0x40022000
 8001864:	40021000 	.word	0x40021000
 8001868:	08001b58 	.word	0x08001b58
 800186c:	20000000 	.word	0x20000000
 8001870:	20000004 	.word	0x20000004

08001874 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001874:	b490      	push	{r4, r7}
 8001876:	b08a      	sub	sp, #40	; 0x28
 8001878:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800187a:	4b29      	ldr	r3, [pc, #164]	; (8001920 <HAL_RCC_GetSysClockFreq+0xac>)
 800187c:	1d3c      	adds	r4, r7, #4
 800187e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001880:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001884:	f240 2301 	movw	r3, #513	; 0x201
 8001888:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]
 800188e:	2300      	movs	r3, #0
 8001890:	61bb      	str	r3, [r7, #24]
 8001892:	2300      	movs	r3, #0
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800189a:	2300      	movs	r3, #0
 800189c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800189e:	4b21      	ldr	r3, [pc, #132]	; (8001924 <HAL_RCC_GetSysClockFreq+0xb0>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	f003 030c 	and.w	r3, r3, #12
 80018aa:	2b04      	cmp	r3, #4
 80018ac:	d002      	beq.n	80018b4 <HAL_RCC_GetSysClockFreq+0x40>
 80018ae:	2b08      	cmp	r3, #8
 80018b0:	d003      	beq.n	80018ba <HAL_RCC_GetSysClockFreq+0x46>
 80018b2:	e02b      	b.n	800190c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018b4:	4b1c      	ldr	r3, [pc, #112]	; (8001928 <HAL_RCC_GetSysClockFreq+0xb4>)
 80018b6:	623b      	str	r3, [r7, #32]
      break;
 80018b8:	e02b      	b.n	8001912 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	0c9b      	lsrs	r3, r3, #18
 80018be:	f003 030f 	and.w	r3, r3, #15
 80018c2:	3328      	adds	r3, #40	; 0x28
 80018c4:	443b      	add	r3, r7
 80018c6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80018ca:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d012      	beq.n	80018fc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80018d6:	4b13      	ldr	r3, [pc, #76]	; (8001924 <HAL_RCC_GetSysClockFreq+0xb0>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	0c5b      	lsrs	r3, r3, #17
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	3328      	adds	r3, #40	; 0x28
 80018e2:	443b      	add	r3, r7
 80018e4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80018e8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	4a0e      	ldr	r2, [pc, #56]	; (8001928 <HAL_RCC_GetSysClockFreq+0xb4>)
 80018ee:	fb03 f202 	mul.w	r2, r3, r2
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f8:	627b      	str	r3, [r7, #36]	; 0x24
 80018fa:	e004      	b.n	8001906 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	4a0b      	ldr	r2, [pc, #44]	; (800192c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001900:	fb02 f303 	mul.w	r3, r2, r3
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	623b      	str	r3, [r7, #32]
      break;
 800190a:	e002      	b.n	8001912 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800190c:	4b06      	ldr	r3, [pc, #24]	; (8001928 <HAL_RCC_GetSysClockFreq+0xb4>)
 800190e:	623b      	str	r3, [r7, #32]
      break;
 8001910:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001912:	6a3b      	ldr	r3, [r7, #32]
}
 8001914:	4618      	mov	r0, r3
 8001916:	3728      	adds	r7, #40	; 0x28
 8001918:	46bd      	mov	sp, r7
 800191a:	bc90      	pop	{r4, r7}
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	08001b48 	.word	0x08001b48
 8001924:	40021000 	.word	0x40021000
 8001928:	007a1200 	.word	0x007a1200
 800192c:	003d0900 	.word	0x003d0900

08001930 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001938:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <RCC_Delay+0x34>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a0a      	ldr	r2, [pc, #40]	; (8001968 <RCC_Delay+0x38>)
 800193e:	fba2 2303 	umull	r2, r3, r2, r3
 8001942:	0a5b      	lsrs	r3, r3, #9
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	fb02 f303 	mul.w	r3, r2, r3
 800194a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800194c:	bf00      	nop
  }
  while (Delay --);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	1e5a      	subs	r2, r3, #1
 8001952:	60fa      	str	r2, [r7, #12]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d1f9      	bne.n	800194c <RCC_Delay+0x1c>
}
 8001958:	bf00      	nop
 800195a:	bf00      	nop
 800195c:	3714      	adds	r7, #20
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr
 8001964:	20000000 	.word	0x20000000
 8001968:	10624dd3 	.word	0x10624dd3

0800196c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001974:	2300      	movs	r3, #0
 8001976:	613b      	str	r3, [r7, #16]
 8001978:	2300      	movs	r3, #0
 800197a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0301 	and.w	r3, r3, #1
 8001984:	2b00      	cmp	r3, #0
 8001986:	d07d      	beq.n	8001a84 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001988:	2300      	movs	r3, #0
 800198a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800198c:	4b4f      	ldr	r3, [pc, #316]	; (8001acc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800198e:	69db      	ldr	r3, [r3, #28]
 8001990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d10d      	bne.n	80019b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001998:	4b4c      	ldr	r3, [pc, #304]	; (8001acc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800199a:	69db      	ldr	r3, [r3, #28]
 800199c:	4a4b      	ldr	r2, [pc, #300]	; (8001acc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800199e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a2:	61d3      	str	r3, [r2, #28]
 80019a4:	4b49      	ldr	r3, [pc, #292]	; (8001acc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019a6:	69db      	ldr	r3, [r3, #28]
 80019a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ac:	60bb      	str	r3, [r7, #8]
 80019ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019b0:	2301      	movs	r3, #1
 80019b2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b4:	4b46      	ldr	r3, [pc, #280]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d118      	bne.n	80019f2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019c0:	4b43      	ldr	r3, [pc, #268]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a42      	ldr	r2, [pc, #264]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80019c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019cc:	f7fe ff32 	bl	8000834 <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d2:	e008      	b.n	80019e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019d4:	f7fe ff2e 	bl	8000834 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b64      	cmp	r3, #100	; 0x64
 80019e0:	d901      	bls.n	80019e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e06d      	b.n	8001ac2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e6:	4b3a      	ldr	r3, [pc, #232]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d0f0      	beq.n	80019d4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80019f2:	4b36      	ldr	r3, [pc, #216]	; (8001acc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019f4:	6a1b      	ldr	r3, [r3, #32]
 80019f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019fa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d02e      	beq.n	8001a60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d027      	beq.n	8001a60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a10:	4b2e      	ldr	r3, [pc, #184]	; (8001acc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a12:	6a1b      	ldr	r3, [r3, #32]
 8001a14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a18:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a1a:	4b2e      	ldr	r3, [pc, #184]	; (8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a20:	4b2c      	ldr	r3, [pc, #176]	; (8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001a26:	4a29      	ldr	r2, [pc, #164]	; (8001acc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d014      	beq.n	8001a60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a36:	f7fe fefd 	bl	8000834 <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a3c:	e00a      	b.n	8001a54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a3e:	f7fe fef9 	bl	8000834 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e036      	b.n	8001ac2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a54:	4b1d      	ldr	r3, [pc, #116]	; (8001acc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a56:	6a1b      	ldr	r3, [r3, #32]
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0ee      	beq.n	8001a3e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a60:	4b1a      	ldr	r3, [pc, #104]	; (8001acc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a62:	6a1b      	ldr	r3, [r3, #32]
 8001a64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	4917      	ldr	r1, [pc, #92]	; (8001acc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a72:	7dfb      	ldrb	r3, [r7, #23]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d105      	bne.n	8001a84 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a78:	4b14      	ldr	r3, [pc, #80]	; (8001acc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a7a:	69db      	ldr	r3, [r3, #28]
 8001a7c:	4a13      	ldr	r2, [pc, #76]	; (8001acc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a82:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d008      	beq.n	8001aa2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001a90:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	490b      	ldr	r1, [pc, #44]	; (8001acc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0310 	and.w	r3, r3, #16
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d008      	beq.n	8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001aae:	4b07      	ldr	r3, [pc, #28]	; (8001acc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	4904      	ldr	r1, [pc, #16]	; (8001acc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001abc:	4313      	orrs	r3, r2
 8001abe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	40007000 	.word	0x40007000
 8001ad4:	42420440 	.word	0x42420440

08001ad8 <__libc_init_array>:
 8001ad8:	b570      	push	{r4, r5, r6, lr}
 8001ada:	2600      	movs	r6, #0
 8001adc:	4d0c      	ldr	r5, [pc, #48]	; (8001b10 <__libc_init_array+0x38>)
 8001ade:	4c0d      	ldr	r4, [pc, #52]	; (8001b14 <__libc_init_array+0x3c>)
 8001ae0:	1b64      	subs	r4, r4, r5
 8001ae2:	10a4      	asrs	r4, r4, #2
 8001ae4:	42a6      	cmp	r6, r4
 8001ae6:	d109      	bne.n	8001afc <__libc_init_array+0x24>
 8001ae8:	f000 f822 	bl	8001b30 <_init>
 8001aec:	2600      	movs	r6, #0
 8001aee:	4d0a      	ldr	r5, [pc, #40]	; (8001b18 <__libc_init_array+0x40>)
 8001af0:	4c0a      	ldr	r4, [pc, #40]	; (8001b1c <__libc_init_array+0x44>)
 8001af2:	1b64      	subs	r4, r4, r5
 8001af4:	10a4      	asrs	r4, r4, #2
 8001af6:	42a6      	cmp	r6, r4
 8001af8:	d105      	bne.n	8001b06 <__libc_init_array+0x2e>
 8001afa:	bd70      	pop	{r4, r5, r6, pc}
 8001afc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b00:	4798      	blx	r3
 8001b02:	3601      	adds	r6, #1
 8001b04:	e7ee      	b.n	8001ae4 <__libc_init_array+0xc>
 8001b06:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b0a:	4798      	blx	r3
 8001b0c:	3601      	adds	r6, #1
 8001b0e:	e7f2      	b.n	8001af6 <__libc_init_array+0x1e>
 8001b10:	08001b68 	.word	0x08001b68
 8001b14:	08001b68 	.word	0x08001b68
 8001b18:	08001b68 	.word	0x08001b68
 8001b1c:	08001b6c 	.word	0x08001b6c

08001b20 <memset>:
 8001b20:	4603      	mov	r3, r0
 8001b22:	4402      	add	r2, r0
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d100      	bne.n	8001b2a <memset+0xa>
 8001b28:	4770      	bx	lr
 8001b2a:	f803 1b01 	strb.w	r1, [r3], #1
 8001b2e:	e7f9      	b.n	8001b24 <memset+0x4>

08001b30 <_init>:
 8001b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b32:	bf00      	nop
 8001b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b36:	bc08      	pop	{r3}
 8001b38:	469e      	mov	lr, r3
 8001b3a:	4770      	bx	lr

08001b3c <_fini>:
 8001b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b3e:	bf00      	nop
 8001b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b42:	bc08      	pop	{r3}
 8001b44:	469e      	mov	lr, r3
 8001b46:	4770      	bx	lr
